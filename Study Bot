
import datetime
from discord.ext import commands, tasks
import discord
from dataclasses import dataclass
import asyncio
from discord.ui import Button, View

auth_token = "auth_token" 
    #allows bot to interact with vsc 
        #when posted to github, the token is automatically reset

channel_id = 1104231767856128050
    #allows bot to interact with specific discord channel"

break_time = 2
    #set time to be notified for a break

''' 
implement code to send resources (ksu website, etc) upon start with command $links
'''

@dataclass
class Session:
    is_active : bool = False
    start_time: int = 0

bot = commands.Bot(command_prefix="$", intents=discord.Intents.all())
    #choose what command you want to start the bot
session = Session()

@bot.event
async def on_ready():
    print("The study bot is online!")
    channel = bot.get_channel(channel_id)
    await channel.send("The study bot is online! \n ")
    
'''
@bot.command()
async def links(ctx):
    button1 = Button(label="D2L", url="https://kennesaw.view.usg.edu/d2l/home" )
    button2 = Button(label="Owl Express", url="https://ksufedhigh.kennesaw.edu/adfs/ls" )
    button3 = Button(label="My GitHub repository", url="https://github.com/ksu-is/Discord-Study-Bot" )
    button3 = Button(label="KSU IS", url="https://github.com/ksu-is")

    async def button_callback (interaction):
        await interaction.response.send_message("Hi!")

    #button.callback = button_callback
    view= View()
    view.add_item(button)
    await ctx.send("Hi!, view=view")
'''

@tasks.loop(minutes = break_time, count=3)
async def break_reminder():

    #ignore first instance of break_time
    if break_reminder.current_loop == 0:
        return

    channel = bot.get_channel(channel_id)
    await channel.send(f"**Time for a break!** You've been studying for {break_time} minutes")
    if break_reminder == 1:
        return

@bot.command()
async def hello(ctx):
    await ctx.send(f"Hello!")

@bot.command()
async def links(ctx):
    await ctx.send(f"Here are a few links for websites you might need to visit often:\n D2L - ""https://kennesaw.view.usg.edu/d2l/home" "\n Owl Express - ""https://ksufedhigh.kennesaw.edu/adfs/ls" "\n My GitHub respository - ""https://github.com/ksu-is/Discord-Study-Bot" "\n KSUIS""https://github.com/ksu-is")

@bot.command()
async def add(ctx, *arr):
    answer = 0
    for i in arr:
        answer += int(i)
    
    await ctx.send(f"The answer is: {answer}")

@bot.command()
async def sub(ctx, *arr):
    answer = 0
    for i in arr:
        answer -= int(i)
    
    await ctx.send(f"The answer is: {answer}")

@bot.command()
async def mult(ctx, *arr):
    answer = 0
    for i in arr:
        answer *= int(i)
    
    await ctx.send(f"The answer is: {answer}")    

@bot.command()
async def formula(ctx):
    await ctx.send("Here are your formulas:", file=discord.File('formula1.png'))

@bot.command()
async def formula2(ctx):
    await ctx.send("Here are your formulas:", file=discord.File("formula2.png"))    

@bot.command()
async def joined(ctx, member: discord.Member):
    """Says when a member joined."""
    await ctx.send(f'{member.name} joined {discord.utils.format_dt(member.joined_at)}')

@bot.command()
async def start(ctx):
    if session.is_active:
        await ctx.send(f"A session is already active. Please close this session first using '$end' before starting another!")
        return
    session.is_active = True
    session.start_time = ctx.message.created_at.timestamp()
    human_readable_time = ctx.message.created_at. strftime("%H:%M:%S")
    break_reminder.start()
    await ctx.send(f"New study session started at {human_readable_time}")

@bot.command()
async def end(ctx):
    if not session.is_active:
        await ctx.send(f"No session is active. Please start a session first using '$start'!")
        return
    session.is_active = False
    end_time = ctx.message.created_at.timestamp()
    duration = end_time - session.start_time
    human_readable_duration = str(datetime.timedelta(seconds=duration))
    break_reminder.stop()
    await ctx.send(f"Session ended at: {human_readable_duration}")


bot.run(auth_token)
